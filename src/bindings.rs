// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

pub mod Microsoft {
    pub mod States {
        windows_core::imp::define_interface!(
            IState,
            IState_Vtbl,
            0x2f0cf45d_04a9_43cc_bc50_ebfe429fcecf
        );
        windows_core::imp::interface_hierarchy!(IState, windows_core::IUnknown);
        impl IState {
            pub unsafe fn GetFlower(&self) -> windows_core::Result<windows_core::BSTR> {
                let mut result__ = core::mem::zeroed();
                (windows_core::Interface::vtable(self).GetFlower)(
                    windows_core::Interface::as_raw(self),
                    &mut result__,
                )
                .map(|| core::mem::transmute(result__))
            }
            pub unsafe fn GetBool(&self) -> u32 {
                (windows_core::Interface::vtable(self).GetBool)(windows_core::Interface::as_raw(
                    self,
                ))
            }
            pub unsafe fn GetData(&self) -> *mut StateData {
                (windows_core::Interface::vtable(self).GetData)(windows_core::Interface::as_raw(
                    self,
                ))
            }
        }
        #[repr(C)]
        pub struct IState_Vtbl {
            pub base__: windows_core::IUnknown_Vtbl,
            pub GetFlower: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub GetBool: unsafe extern "system" fn(*mut core::ffi::c_void) -> u32,
            pub GetData: unsafe extern "system" fn(*mut core::ffi::c_void) -> *mut StateData,
        }
        pub trait IState_Impl: windows_core::IUnknownImpl {
            fn GetFlower(&self) -> windows_core::Result<windows_core::BSTR>;
            fn GetBool(&self) -> u32;
            fn GetData(&self) -> *mut StateData;
        }
        impl IState_Vtbl {
            pub const fn new<Identity: IState_Impl, const OFFSET: isize>() -> Self {
                unsafe extern "system" fn GetFlower<Identity: IState_Impl, const OFFSET: isize>(
                    this: *mut core::ffi::c_void,
                    flower: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    match IState_Impl::GetFlower(this) {
                        Ok(ok__) => {
                            flower.write(core::mem::transmute(ok__));
                            windows_core::HRESULT(0)
                        }
                        Err(err) => err.into(),
                    }
                }
                unsafe extern "system" fn GetBool<Identity: IState_Impl, const OFFSET: isize>(
                    this: *mut core::ffi::c_void,
                ) -> u32 {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IState_Impl::GetBool(this)
                }
                unsafe extern "system" fn GetData<Identity: IState_Impl, const OFFSET: isize>(
                    this: *mut core::ffi::c_void,
                ) -> *mut StateData {
                    let this: &Identity =
                        &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                    IState_Impl::GetData(this)
                }
                Self {
                    base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
                    GetFlower: GetFlower::<Identity, OFFSET>,
                    GetBool: GetBool::<Identity, OFFSET>,
                    GetData: GetData::<Identity, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IState as windows_core::Interface>::IID
            }
        }
        impl windows_core::RuntimeName for IState {}
        #[repr(C)]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub struct StateData {
            pub Ok: super::super::Windows::Win32::Foundation::BOOLEAN,
            pub Ok2: super::super::Windows::Win32::Foundation::BOOL,
            pub Name: windows_core::PCWSTR,
            pub Name2: windows_core::PCSTR,
            pub Number: u32,
            pub Number2: i32,
            pub Flags: u32,
            pub Data: *mut u8,
            pub Reserved: *mut core::ffi::c_void,
        }
        impl Default for StateData {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        impl windows_core::TypeKind for StateData {
            type TypeKind = windows_core::CopyType;
        }
        pub mod Washington {
            windows_core::imp::define_interface!(
                IWashington,
                IWashington_Vtbl,
                0xa7c97d53_cf24_4453_bd17_55a48e1d0510
            );
            windows_core::imp::interface_hierarchy!(IWashington, windows_core::IUnknown);
            impl IWashington {
                pub unsafe fn Load(&self) -> windows_core::Result<()> {
                    (windows_core::Interface::vtable(self).Load)(windows_core::Interface::as_raw(
                        self,
                    ))
                    .ok()
                }
                pub unsafe fn LoadFrom<P0>(&self, path: P0) -> windows_core::Result<()>
                where
                    P0: windows_core::Param<windows_core::PCWSTR>,
                {
                    (windows_core::Interface::vtable(self).LoadFrom)(
                        windows_core::Interface::as_raw(self),
                        path.param().abi(),
                    )
                    .ok()
                }
            }
            #[repr(C)]
            pub struct IWashington_Vtbl {
                pub base__: windows_core::IUnknown_Vtbl,
                pub Load:
                    unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
                pub LoadFrom: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::PCWSTR,
                ) -> windows_core::HRESULT,
            }
            pub trait IWashington_Impl: windows_core::IUnknownImpl {
                fn Load(&self) -> windows_core::Result<()>;
                fn LoadFrom(&self, path: &windows_core::PCWSTR) -> windows_core::Result<()>;
            }
            impl IWashington_Vtbl {
                pub const fn new<Identity: IWashington_Impl, const OFFSET: isize>() -> Self {
                    unsafe extern "system" fn Load<
                        Identity: IWashington_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IWashington_Impl::Load(this).into()
                    }
                    unsafe extern "system" fn LoadFrom<
                        Identity: IWashington_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        path: windows_core::PCWSTR,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IWashington_Impl::LoadFrom(this, core::mem::transmute(&path)).into()
                    }
                    Self {
                        base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
                        Load: Load::<Identity, OFFSET>,
                        LoadFrom: LoadFrom::<Identity, OFFSET>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IWashington as windows_core::Interface>::IID
                }
            }
            impl windows_core::RuntimeName for IWashington {}
            windows_core::imp::define_interface!(
                IWashington2,
                IWashington2_Vtbl,
                0xe27af699_bc37_47b8_ad97_1c6720389efd
            );
            impl core::ops::Deref for IWashington2 {
                type Target = IWashington;
                fn deref(&self) -> &Self::Target {
                    unsafe { core::mem::transmute(self) }
                }
            }
            windows_core::imp::interface_hierarchy!(
                IWashington2,
                windows_core::IUnknown,
                IWashington
            );
            impl IWashington2 {
                pub unsafe fn Load2(&self) -> windows_core::Result<()> {
                    (windows_core::Interface::vtable(self).Load2)(windows_core::Interface::as_raw(
                        self,
                    ))
                    .ok()
                }
            }
            #[repr(C)]
            pub struct IWashington2_Vtbl {
                pub base__: IWashington_Vtbl,
                pub Load2:
                    unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
            }
            pub trait IWashington2_Impl: IWashington_Impl {
                fn Load2(&self) -> windows_core::Result<()>;
            }
            impl IWashington2_Vtbl {
                pub const fn new<Identity: IWashington2_Impl, const OFFSET: isize>() -> Self {
                    unsafe extern "system" fn Load2<
                        Identity: IWashington2_Impl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                    ) -> windows_core::HRESULT {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        IWashington2_Impl::Load2(this).into()
                    }
                    Self {
                        base__: IWashington_Vtbl::new::<Identity, OFFSET>(),
                        Load2: Load2::<Identity, OFFSET>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IWashington2 as windows_core::Interface>::IID
                        || iid == &<IWashington as windows_core::Interface>::IID
                }
            }
            impl windows_core::RuntimeName for IWashington2 {}
        }
    }
}
pub mod Windows {
    pub mod Win32 {
        pub mod Foundation {
            #[must_use]
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, PartialEq, Eq, Default)]
            pub struct BOOL(pub i32);
            impl windows_core::TypeKind for BOOL {
                type TypeKind = windows_core::CopyType;
            }
            #[repr(transparent)]
            #[derive(Clone, Copy, Debug, PartialEq, Eq, Default)]
            pub struct BOOLEAN(pub u8);
            impl windows_core::TypeKind for BOOLEAN {
                type TypeKind = windows_core::CopyType;
            }
        }
    }
}
