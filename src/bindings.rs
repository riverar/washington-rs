// Bindings generated by `windows-bindgen` 0.53.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
pub mod States {
    pub mod Washington {
        ::windows_core::imp::com_interface!(
            IWashington,
            IWashington_Vtbl,
            0xa7c97d53_cf24_4453_bd17_55a48e1d0510
        );
        ::windows_core::imp::interface_hierarchy!(IWashington, ::windows_core::IUnknown);
        impl IWashington {
            pub unsafe fn Load(&self) -> ::windows_core::Result<()> {
                (::windows_core::Interface::vtable(self).Load)(::windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
            pub unsafe fn LoadFrom<P0>(&self, path: P0) -> ::windows_core::Result<()>
            where
                P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
            {
                (::windows_core::Interface::vtable(self).LoadFrom)(
                    ::windows_core::Interface::as_raw(self),
                    path.into_param().abi(),
                )
                .ok()
            }
        }
        #[repr(C)]
        pub struct IWashington_Vtbl {
            pub base__: ::windows_core::IUnknown_Vtbl,
            pub Load:
                unsafe extern "system" fn(*mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
            pub LoadFrom: unsafe extern "system" fn(
                *mut ::core::ffi::c_void,
                ::windows_core::PCWSTR,
            ) -> ::windows_core::HRESULT,
        }
        ::windows_core::imp::com_interface!(
            IWashington2,
            IWashington2_Vtbl,
            0xe27af699_bc37_47b8_ad97_1c6720389efd
        );
        ::windows_core::imp::interface_hierarchy!(
            IWashington2,
            ::windows_core::IUnknown,
            IWashington
        );
        impl IWashington2 {
            pub unsafe fn Load(&self) -> ::windows_core::Result<()> {
                (::windows_core::Interface::vtable(self).base__.Load)(
                    ::windows_core::Interface::as_raw(self),
                )
                .ok()
            }
            pub unsafe fn LoadFrom<P0>(&self, path: P0) -> ::windows_core::Result<()>
            where
                P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
            {
                (::windows_core::Interface::vtable(self).base__.LoadFrom)(
                    ::windows_core::Interface::as_raw(self),
                    path.into_param().abi(),
                )
                .ok()
            }
            pub unsafe fn Load2(&self) -> ::windows_core::Result<()> {
                (::windows_core::Interface::vtable(self).Load2)(::windows_core::Interface::as_raw(
                    self,
                ))
                .ok()
            }
        }
        #[repr(C)]
        pub struct IWashington2_Vtbl {
            pub base__: IWashington_Vtbl,
            pub Load2:
                unsafe extern "system" fn(*mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
        }
        pub trait IWashington_Impl: Sized {
            fn Load(&self) -> ::windows_core::Result<()>;
            fn LoadFrom(&self, path: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
        }
        impl ::windows_core::RuntimeName for IWashington {}
        impl IWashington_Vtbl {
            pub const fn new<
                Identity: ::windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IWashington_Impl,
                const OFFSET: isize,
            >() -> IWashington_Vtbl {
                unsafe extern "system" fn Load<
                    Identity: ::windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IWashington_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut ::core::ffi::c_void,
                ) -> ::windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    this.Load().into()
                }
                unsafe extern "system" fn LoadFrom<
                    Identity: ::windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IWashington_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut ::core::ffi::c_void,
                    path: ::windows_core::PCWSTR,
                ) -> ::windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    this.LoadFrom(::core::mem::transmute(&path)).into()
                }
                Self {
                    base__: ::windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
                    Load: Load::<Identity, Impl, OFFSET>,
                    LoadFrom: LoadFrom::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &::windows_core::GUID) -> bool {
                iid == &<IWashington as ::windows_core::Interface>::IID
            }
        }
        pub trait IWashington2_Impl: Sized + IWashington_Impl {
            fn Load2(&self) -> ::windows_core::Result<()>;
        }
        impl ::windows_core::RuntimeName for IWashington2 {}
        impl IWashington2_Vtbl {
            pub const fn new<
                Identity: ::windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IWashington2_Impl,
                const OFFSET: isize,
            >() -> IWashington2_Vtbl {
                unsafe extern "system" fn Load2<
                    Identity: ::windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IWashington2_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut ::core::ffi::c_void,
                ) -> ::windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    this.Load2().into()
                }
                Self {
                    base__: IWashington_Vtbl::new::<Identity, Impl, OFFSET>(),
                    Load2: Load2::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &::windows_core::GUID) -> bool {
                iid == &<IWashington2 as ::windows_core::Interface>::IID
                    || iid == &<IWashington as ::windows_core::Interface>::IID
            }
        }
    }
    ::windows_core::imp::com_interface!(
        IState,
        IState_Vtbl,
        0x2f0cf45d_04a9_43cc_bc50_ebfe429fcecf
    );
    ::windows_core::imp::interface_hierarchy!(IState, ::windows_core::IUnknown);
    impl IState {
        pub unsafe fn GetFlower(&self) -> ::windows_core::Result<::windows_core::BSTR> {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(self).GetFlower)(
                ::windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .and_then(|| ::windows_core::Type::from_abi(result__))
        }
    }
    #[repr(C)]
    pub struct IState_Vtbl {
        pub base__: ::windows_core::IUnknown_Vtbl,
        pub GetFlower: unsafe extern "system" fn(
            *mut ::core::ffi::c_void,
            *mut ::std::mem::MaybeUninit<::windows_core::BSTR>,
        ) -> ::windows_core::HRESULT,
    }
    pub trait IState_Impl: Sized {
        fn GetFlower(&self) -> ::windows_core::Result<::windows_core::BSTR>;
    }
    impl ::windows_core::RuntimeName for IState {}
    impl IState_Vtbl {
        pub const fn new<
            Identity: ::windows_core::IUnknownImpl<Impl = Impl>,
            Impl: IState_Impl,
            const OFFSET: isize,
        >() -> IState_Vtbl {
            unsafe extern "system" fn GetFlower<
                Identity: ::windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IState_Impl,
                const OFFSET: isize,
            >(
                this: *mut ::core::ffi::c_void,
                flower: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>,
            ) -> ::windows_core::HRESULT {
                let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                let this = (*this).get_impl();
                match this.GetFlower() {
                    ::core::result::Result::Ok(ok__) => {
                        ::core::ptr::write(flower, ::core::mem::transmute(ok__));
                        ::windows_core::HRESULT(0)
                    }
                    ::core::result::Result::Err(err) => err.into(),
                }
            }
            Self {
                base__: ::windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
                GetFlower: GetFlower::<Identity, Impl, OFFSET>,
            }
        }
        pub fn matches(iid: &::windows_core::GUID) -> bool {
            iid == &<IState as ::windows_core::Interface>::IID
        }
    }
}
